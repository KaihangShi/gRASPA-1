PATCH_ALLEGRO_INSERTION
    if(SystemComponents.UseAllegro)
    {
      bool Initialize = false;
      cudaMemcpy(SystemComponents.DNN.UCAtoms[SelectedComponent].pos, Sims.Old.pos, sizeof(double3) * SystemComponents.Moleculesize[SelectedComponent], cudaMemcpyDeviceToHost);
      if(SystemComponents.CURRENTCYCLE <= 5)
        for(size_t i = 0; i < SystemComponents.Moleculesize[SelectedComponent]; i++)
          printf("Cycle: %zu, pos: %f %f %f\n", SystemComponents.DNN.UCAtoms[SelectedComponent].pos[i].x, SystemComponents.DNN.UCAtoms[SelectedComponent].pos[i].y, SystemComponents.DNN.UCAtoms[SelectedComponent].pos[i].z);

        DNN_New = SystemComponents.DNN.MCEnergyWrapper(SelectedComponent, Initialize, SystemComponents.DNNEnergyConversion);
    }

PATCH_ALLEGRO_DELETION
    if(SystemComponents.UseAllegro)
    {
      bool Initialize = false;
      cudaMemcpy(SystemComponents.DNN.UCAtoms[SelectedComponent].pos, Sims.Old.pos, sizeof(double3) * SystemComponents.Moleculesize[SelectedComponent], cudaMemcpyDeviceToHost);
      DNN_New = SystemComponents.DNN.MCEnergyWrapper(SelectedComponent, Initialize, SystemComponents.DNNEnergyConversion);
    }

PATCH_ALLEGRO_SINGLE
    if(SystemComponents.UseAllegro)
    {
      bool Initialize = false;

      if(Do_New)
      {
        cudaMemcpy(SystemComponents.DNN.UCAtoms[SelectedComponent].pos, Sims.New.pos, sizeof(double3) * SystemComponents.Moleculesize[SelectedComponent], cudaMemcpyDeviceToHost);
        DNN_New = SystemComponents.DNN.MCEnergyWrapper(SelectedComponent, Initialize, SystemComponents.DNNEnergyConversion);
        //printf("DNN_New %f\n", DNN_New);
      }
      if(Do_Old)
      {
        cudaMemcpy(SystemComponents.DNN.UCAtoms[SelectedComponent].pos, Sims.Old.pos, sizeof(double3) * SystemComponents.Moleculesize[SelectedComponent], cudaMemcpyDeviceToHost);
        DNN_Old = SystemComponents.DNN.MCEnergyWrapper(SelectedComponent, Initialize, SystemComponents.DNNEnergyConversion);
        //printf("DNN_New %f\n", DNN_Old);
      }
    }

PATCH_ALLEGRO_REINSERTION
  if(SystemComponents.UseAllegro)
  {
    bool Initialize = false;
    cudaMemcpy(SystemComponents.DNN.UCAtoms[SelectedComponent].pos, temp, sizeof(double3) * SystemComponents.Moleculesize[SelectedComponent], cudaMemcpyDeviceToHost);
    DNN_New = SystemComponents.DNN.MCEnergyWrapper(SelectedComponent, Initialize, SystemComponents.DNNEnergyConversion);
    cudaMemcpy(SystemComponents.DNN.UCAtoms[SelectedComponent].pos, Sims.Old.pos, sizeof(double3) * SystemComponents.Moleculesize[SelectedComponent], cudaMemcpyDeviceToHost);
    DNN_Old = SystemComponents.DNN.MCEnergyWrapper(SelectedComponent, Initialize, SystemComponents.DNNEnergyConversion);
  }

PATCH_ALLEGRO_FXNMAIN
  if(SystemComponents.UseAllegro)
  {
    bool Initialize = false;
    size_t comp = 1;
    for(size_t i = 0; i < SystemComponents.NumberOfMolecule_for_Component[comp]; i++)
    {
      for(size_t j = 0; j < SystemComponents.Moleculesize[comp]; j++)
      {
        size_t AtomIdx = i * SystemComponents.Moleculesize[comp] + j;
        SystemComponents.DNN.UCAtoms[comp].pos[j] = SystemComponents.HostSystem[comp].pos[AtomIdx];
      }
      DNN_E += SystemComponents.DNN.MCEnergyWrapper(comp, Initialize, SystemComponents.DNNEnergyConversion);
    }
  }
