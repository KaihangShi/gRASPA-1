.. _translation_ref:

================
mc_translation
================

#. SingleMove

		* inputs: 
		
		.. code-block:: C
		
				Components& SystemComponents, Simulations& Sims, WidomStruct& Widom, ForceField& FF, RandomNumber& Random, size_t SelectedMolInComponent, size_t SelectedComponent, int MoveType
				
		* Descriptions:
		
				#. This function is a combination of translation and rotation move of a single molecule or a user-defined group of atoms
				#. variable *MoveType* is needed
						0: TRANSLATION
						1: ROTATION

#. get_new_position (**CUDA FUNCTION**)

		* inputs: 
		
		.. code-block:: C
		
				Atoms* d_a, Atoms Mol, Atoms NewMol, ForceField FF, size_t start_position, size_t SelectedComponent, double* random, size_t offset, double3 Max, bool* device_flag, int MoveType
				
		* Descriptions:
		
				Process the new and old positions for the selected molecule or group of atoms
		
		* NOTE:
		
				#. For the new positions, the xyz locations are determined by the *MoveType*
				#. For translation, it determines the new xyz based on the maximum displacement in each direction
				#. For rotation, it uses the rotation matrix to rotate the molecule by x-, y-, and z-axis based on the maximum rotation angle
				#. variable *device_flag* is zeroed at this step, it is used to check for energy overlap in the following energy calculation step
						It is useful to reject the move and skip the expensive Ewald calculation if the newly proposed position is bad.
		
#. RotationAroundXAxis/RotationAroundYAxis/RotationAroundZAxis

		* inputs:
		
		.. code-block:: C
		
				Atoms Mol,size_t i,double theta
				
		* Descriptions:
		
				Rotate the group of atoms by *theta* degrees
				
#. update_translation_position (**CUDA FUNCTION**)

		* inputs:
		
		.. code-block:: C
		
				Atoms* d_a, Atoms NewMol, size_t start_position, size_t SelectedComponent
				
		* Descriptions:
		
				write the new positions (and related values) from *NewMol* to the *start_position* of *d_a*
				
		* NOTE:
		
				The start_position is where the molecule should be stored in *d_a* for the *SelectedComponent*.
				For example, for TIP4P (4 atoms), the molecule we selected is 4, then start_position = 4*4 = 16.
				If SelectedComponent = 1, then we need to update position 16, 17, 18, and 19 in d_a[1]
				
#. Setup_threadblock

		* inputs:
		
		.. code-block:: C
		
				size_t arraysize, size_t *Nblock, size_t *Nthread
				
		* Descriptions:
		
				Get the required number of blocks (SM) and threads (cuda-cores) for the following computation
				
		* NOTE:
		
				These values are provided to the **CUDA Kernel Functions** using the **chevron**: <<<>>>