.. _Ewald_ref:

================================
Ewald_Energy_Functions
================================

* NOTES:
		* Ewald summation relies on the complex values
		* See Complex struct in data_struct.h
		* On the CPU, we use the complex number in the standard C++ library (std::complex)
		* On the GPU, we use the user-defined comple struct
		* arithmatics of complex values are also defined in this function
		* Similar to the CPU version, the wavevectors are stored in the *Eik* variables
				#. *storedEik* is for storing wavevectors after a move is accepted
				#. *totalEik* is for storing temporary wavevectors before a move is accepted, or for intermediate steps 
						* for example, for the first step of CBCF-insertion/CBCF-deletions
				#. *eik_x*, *eik_y*, *eik_z* are the temporary wavevectors in the x/y/z directions
						*. in RASPA-2.0/RASPA-3.0 the cross term *eik_xy* is also needed. However, it is not needed for the CUDA version since the cross terms are generated on the fly for each grid point.
		
#. **Initialize_EwaldVector_General**
		* Prepare for the Ewald summation calculation for a move
		* See data_struct.h for the move types
		* All the new/old position/charge/scaling information are stored in the *Old* struct in the Simulation struct (see data_struct.h)
		
#. **Fourier_Ewald_Diff**
		* Generalized CUDA kernel (GPU) function for Ewald summation for a move
		* Each thread of the GPU takes care of a grid point (a set of kx/ky/kz)

#. **GPU_EwaldDifference_General**
		* Generalized function that handles the ewald summation for a move
		* It has different modes based on the move performed
		* This function does NOT take care of Reinsertion, Reinsertion has its own function
		* The function first calls *Initialize_EwaldVector_General*, then *Fourier_Ewald_Diff*
		* Finally, when the fourier part is done, the function takes care of the exclusion part.
		* The exclusion part currently assumes that the molecule is **RIGID**.
		
#. **GPU_EwaldDifference_Reinsertion**
		* Function that does ewald summation for reinsertion move
		
#. **Fourier_Ewald_Diff_LambdaChange**
		* Special function used for lambda change of CBCFC
		* a little faster than the generalized function *Fourier_Ewald_Diff*, since the position of the molecule is not changed

#. **GPU_EwaldDifference_LambdaChange**
		* special function that handles ewald summation for CBCFC lambda change move
		* calls *Fourier_Ewald_Diff_LambdaChange*
		
#. **Setup_Ewald_Vector**
		* Prepares temporary wavevectors (*eik_x*, *eik_y*, *eik_z*) for the whole system

#. **TotalEwald**
		* CUDA function that calculates the Ewald summation of the whole system
		* Each block (by default, the bundle of 128 threads) handles a grid point (a set of kx/ky/kz)
		* Work is distributed equally among the threads within the block

#. **Ewald_TotalEnergy**
		* Function that calculates the ewald summation for the whole system
		* Uses *Blocksum*, if allocated size for *blocksum* is smaller than required, more spaces are allocated
		* Calls *Setup_Ewald_Vector*, then *TotalEwald*
		* Handles exclusion part assuming RIGID molecules